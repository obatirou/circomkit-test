import type {CircuitConfig} from '../types/circuit';
import {writeFileSync, existsSync, mkdirSync} from 'fs';

/** Circuit builder, kinda like `ejs.render`. **Be very careful when editing this file.** */
const makeCircuit = (config: Required<CircuitConfig>) => `// auto-generated by circomkit
pragma circom ${config.version};

include "../${config.file}.circom";

component main${config.pubs.length === 0 ? '' : ' {public[' + config.pubs.join(', ') + ']}'} = ${
  config.template
}(${config.params.join(', ')});
`;

/**
 * Programmatically generate the `main` component of a circuit
 * @param name name of the circuit to be generated
 * @param circuitConfig circuit configuration
 * @return path to the created file
 */
export function instantiate(name: string, circuitConfig: CircuitConfig): string {
  // directory to output the file
  const directory = circuitConfig.dir || 'test';

  // add "../" to the filename in include, one for each "/" in directory name
  // if none, the prefix becomes empty string
  const filePrefixMatches = directory.match(/\//g);
  let file = circuitConfig.file;
  if (filePrefixMatches !== null) {
    file = '../'.repeat(filePrefixMatches.length) + file;
  }

  const circuitCode = makeCircuit({
    file: file,
    template: circuitConfig.template,
    version: circuitConfig.version || '2.0.0',
    dir: directory,
    pubs: circuitConfig.pubs || [],
    params: circuitConfig.params || [],
  });

  const targetDir = `./circuits/${directory}`;
  if (!existsSync(targetDir)) {
    mkdirSync(targetDir, {
      recursive: true,
    });
  }
  const targetPath = `${targetDir}/${name}.circom`;
  writeFileSync(targetPath, circuitCode);

  return targetPath;
}
